{% extends "page.njk" %}

{% block head %}
{{super()}}
{%- if spy -%}
<script>
    let navigations = {}

    function setNavSelect(target) {
        let navLinks = document.querySelector(".x-govuk-sub-navigation").querySelectorAll("a");
        navLinks.forEach(el => {
            el.parentElement.classList.remove("x-govuk-sub-navigation__section-item--current")
            el.setAttribute("aria-current", false);
        })
        target.parentElement.classList.add("x-govuk-sub-navigation__section-item--current")
        target.setAttribute("aria-current", true)
    }

    function updateNavigation() {
        if (navigations.length == 0) return;

        let max = null;
        for (summary of Object.values(navigations)) {
            if (max == null || summary.ratio > max.ratio) {
                max = summary
            }
            console.log(max.ratio, ">", summary.ratio)
        }
        navigations = {}
        max && setNavSelect(max.link)
    }

    function createThresholds(step) {
        let thresholds = []
        for (let i = 0.0; i <= 1.0; i += step) 
            thresholds.push(i)
    }
    function setupScrollSpy() {
        const options = {
            root: null,
            rootMargin: "0px",
            threshold: createThresholds(0.01)
        };

        document.querySelector(".x-govuk-sub-navigation")
            .querySelectorAll("a")
            .forEach(link => {
                let id = link.href.substring(link.href.lastIndexOf('#')+1);
                let observer = new IntersectionObserver((entries, obz) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting)
                        navigations[link.href] = {
                            link: link,
                            ratio: entry.intersectionRatio
                        }
                    })
                }, options);
                let observed = document.getElementById(id);
                if (observed.parentNode.tagName === "SECTION") {
                    observed = observed.parentNode;
                }
                observer.observe(observed);
            })
    }
    document.addEventListener("DOMContentLoaded", () => {
        setupScrollSpy()
        setInterval(updateNavigation)
    });
</script>
{%- endif -%}
{% endblock %}

{% block content %}
<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third sticky">
        {{ xGovukSubNavigation({ items: sidenav}) }}
    </div>
    <div class="govuk-grid-column-two-thirds">
        {{ super() }}
    </div>
</div>
{% endblock %}